// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  avatar        String?
  role          UserRole  @default(SEEKER)
  bio           String?
  
  // Skills they offer
  skillsOffering Skill[]  @relation("SkillsOffered")
  // Skills they want to learn
  skillsLearning Skill[]  @relation("SkillsWanted")
  
  // Modules they created
  createdModules Module[]
  
  // Enrollment in modules
  enrollments   Enrollment[]
  
  // Chat messages
  messages      Message[]
  
  // Quiz attempts
  quizAttempts  QuizAttempt[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  level       SkillLevel @default(BEGINNER)
  
  // Users who offer this skill
  offeredBy   User[]    @relation("SkillsOffered")
  // Users who want to learn this skill
  wantedBy    User[]    @relation("SkillsWanted")
  
  modules     Module[]
  
  createdAt DateTime @default(now())
}

model Module {
  id           String       @id @default(cuid())
  title        String
  description  String
  content      String       @db.Text
  skillId      String
  instructorId String
  duration     Int?         // in hours
  difficulty   SkillLevel   @default(BEGINNER)
  
  skill        Skill        @relation(fields: [skillId], references: [id])
  instructor   User         @relation(fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  quizzes      Quiz[]
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Enrollment {
  id         String   @id @default(cuid())
  userId     String
  moduleId   String
  progress   Progress @default(NOT_STARTED)
  completed  Boolean  @default(false)
  enrolledAt DateTime @default(now())
  completedAt DateTime?
  
  user   User   @relation(fields: [userId], references: [id])
  module Module @relation(fields: [moduleId], references: [id])
  
  @@unique([userId, moduleId])
}

model Quiz {
  id        String   @id @default(cuid())
  moduleId  String
  questions Json     // Array of questions generated by AI
  createdAt DateTime @default(now())
  
  module   Module        @relation(fields: [moduleId], references: [id])
  attempts QuizAttempt[]
}

model QuizAttempt {
  id        String   @id @default(cuid())
  quizId    String
  userId    String
  answers   Json     // User's answers
  score     Float
  attemptedAt DateTime @default(now())
  
  quiz Quiz @relation(fields: [quizId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.Text
  role      MessageRole // 'user' or 'assistant'
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
}

enum UserRole {
  SEEKER
  SKILLED
  ADMIN
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum Progress {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum MessageRole {
  USER
  ASSISTANT
}